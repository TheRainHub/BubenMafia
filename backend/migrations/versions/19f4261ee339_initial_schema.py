"""initial schema

Revision ID: 19f4261ee339
Revises: 
Create Date: 2025-07-23 00:26:08.404772

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "19f4261ee339"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "eventtype",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "ruleset",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("organizer", "gm", "player", name="role_enum", native_enum=False),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "game",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("players_qty", sa.Integer(), nullable=False),
        sa.Column("rule_set_id", sa.Integer(), nullable=False),
        sa.Column("gm_id", sa.Uuid(), nullable=False),
        sa.Column(
            "state",
            sa.Enum("draft", "live", "finished", "aborted", name="gamestate"),
            nullable=False,
        ),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("finished_at", sa.DateTime(), nullable=True),
        sa.Column("aborted", sa.Boolean(), nullable=False),
        sa.CheckConstraint("players_qty BETWEEN 7 AND 10", name="ck_players_qty_7_10"),
        sa.ForeignKeyConstraint(
            ["gm_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["rule_set_id"],
            ["ruleset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "player",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "nickname", sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False
        ),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column(
            "avatar_url", sqlmodel.sql.sqltypes.AutoString(length=512), nullable=True
        ),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("is_registered", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.CheckConstraint(
            "(is_registered) OR (email IS NULL)",
            name="ck_player_email_null_when_unregistered",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("nickname", name="uq_player_nickname"),
    )
    op.create_index(op.f("ix_player_nickname"), "player", ["nickname"], unique=False)
    op.create_table(
        "ruleitem",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("rule_set_id", sa.Integer(), nullable=False),
        sa.Column(
            "condition",
            sa.Enum(
                "CITY_WIN",
                "MAFIA_WIN",
                "FIRST_NIGHT_KILLED",
                "BEST_MOVE_GUESS_DUO",
                "BEST_MOVE_GUESS_TRIO",
                "BEST_MOVE_GUESS_DUO_SHERIFF",
                "BEST_MOVE_GUESS_TRIO_SHERIFF",
                name="condition_enum",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "role_filter",
            sa.Enum("citizen", "sheriff", "mafia", "don", name="gamerole"),
            nullable=True,
        ),
        sa.Column("delta", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["rule_set_id"],
            ["ruleset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "rule_set_id", "condition", "role_filter", name="uq_ruleitem_unique_triplet"
        ),
    )
    op.create_table(
        "gameaudit",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("field", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column("old_value", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("new_value", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("ts", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["game.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "gameevent",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("ts", sa.DateTime(timezone=True), nullable=False),
        sa.Column("event_type_id", sa.Integer(), nullable=False),
        sa.Column("payload", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_type_id"],
            ["eventtype.id"],
        ),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["game.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "gameplayer",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("seat_no", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("citizen", "sheriff", "mafia", "don", name="gamerole"),
            nullable=False,
        ),
        sa.Column("fouls_count", sa.Integer(), nullable=False),
        sa.Column("removed", sa.Boolean(), nullable=False),
        sa.Column("total_points", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["game.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["player.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("game_id", "seat_no", name="uq_game_seat"),
    )
    op.create_table(
        "voteround",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("round_no", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["game.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "extrapoints",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("game_player_id", sa.Integer(), nullable=False),
        sa.Column("delta", sa.Float(), nullable=False),
        sa.Column(
            "reason", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["game_player_id"],
            ["gameplayer.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "voteitem",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vote_round_id", sa.Integer(), nullable=False),
        sa.Column("target_seat", sa.Integer(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vote_round_id"],
            ["voteround.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("voteitem")
    op.drop_table("extrapoints")
    op.drop_table("voteround")
    op.drop_table("gameplayer")
    op.drop_table("gameevent")
    op.drop_table("gameaudit")
    op.drop_table("ruleitem")
    op.drop_index(op.f("ix_player_nickname"), table_name="player")
    op.drop_table("player")
    op.drop_table("game")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("ruleset")
    op.drop_table("eventtype")
    # ### end Alembic commands ###
